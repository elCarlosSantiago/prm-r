//Prsiam Schema Documentation https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

//Product Models
model Product {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    name        String
    price       Int
    stock       Int
    description String?     @db.VarChar(360)
    image       String?
    category    Category    @relation(fields: [categoryId], references: [id])
    categoryId  String
    // Organization   Organization? @relation(fields: [organizationId], references: [id])
    // organizationId String?
    orderItem   OrderItem[]

    @@index([categoryId], name: "categoryId")
}

model Category {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    name      String
    products  Product[]
}

//Order Models
model Order {
    id                String      @id @default(cuid())
    createdAt         DateTime    @default(now())
    updatedAt         DateTime    @updatedAt
    status            String      @default("PENDING")
    total             Int //This would get broken down into subtotals (tax, shipping, vendor_net, platform_margin, etc)
    orderItem         OrderItem[]
    customer          Customer    @relation(fields: [customerId], references: [id])
    trackingNumber    String
    trackingCompany   String
    shippingAddressId String
    customerId        String
    // paymentIntentId   String if implemented with stripe
    paymentMethod     String
    // Organization      Organization? @relation(fields: [organizationId], references: [id])
    // organizationId    String?
    address           Address     @relation(fields: [shippingAddressId], references: [id])

    // @@index([organizationId], name: "organizationId")
    @@index([customerId], name: "customerId")
    @@index([shippingAddressId], name: "shippingAddressId")
}

model OrderItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    quantity  Int
    price     Decimal
    order     Order    @relation(fields: [orderId], references: [id])
    orderId   String
    product   Product  @relation(fields: [productId], references: [id])
    productId String

    @@index([orderId], name: "orderId")
    @@index([productId], name: "productId")
}

//Customer Models
model Customer {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    firstName String   @db.VarChar(50)
    lastName  String   @db.VarChar(50)
    email     String   @unique
    phone     String   @db.VarChar(20)
    orders    Order[]
}

model Address {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    line1     String
    line2     String?
    city      String
    state     String
    zip       String
    country   String
    Order     Order[]
    // Organization   Organization? @relation(fields: [organizationId], references: [id])
    // organizationId String?
}

//Clerk allows us to leverage Organizations & roles for users. For admin permissions / Org metadata.
//Conversely, we could store User data in its own table and use Clerk for auth only.
// Said model would look like this (give or take depending on how much user info we want to store)

// model User {
//     id             String       @id @default(cuid())
//     createdAt      DateTime     @default(now())
//     updatedAt      DateTime     @updatedAt
//     firstName      String       @db.VarChar(50)
//     lastName       String       @db.VarChar(50)
//     email          String       @unique
//     phone          String       @db.VarChar(20)
//     // password  String we could opt for passworldess auth /based on project reqs.
//     organizationId String
//     Organization   Organization @relation(fields: [organizationId], references: [id])

//     @@index([organizationId], name: "organizationId")
// }

// model Organization {
//     id        String    @id @default(cuid())
//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     name      String    @db.VarChar(50)
//     users     User[]
//     products  Product[]
//     orders    Order[]
// }
